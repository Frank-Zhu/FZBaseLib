package com.frankzhu.appbaselibrary.utils;

import android.content.Context;
import android.content.SharedPreferences;
import android.os.Build;
import android.provider.Settings;
import android.telephony.TelephonyManager;
import android.util.Log;

import com.frankzhu.appbaselibrary.app.FZBaseApplication;

import java.io.UnsupportedEncodingException;
import java.util.UUID;

/**
 * Author:    ZhuWenWu
 * Version    V1.0
 * Date:      16/2/23  下午5:21.
 * Description:
 * Modification  History:
 * Date         	Author        		Version        	Description
 * -----------------------------------------------------------------------------------
 * 16/2/23        ZhuWenWu            1.0                    1.0
 * Why & What is modified:
 */
public class FZDeviceUuidHelper {
    private final static String TAG = "DeviceUuidFactory";
    protected static final String PREFS_FILE = "device_id.xml";
    protected static final String PREFS_DEVICE_ID = "device_id";

    protected static String uuid;

    public FZDeviceUuidHelper(Context context) {
        if (uuid == null) {
            synchronized (FZDeviceUuidHelper.class) {
                if (uuid == null) {
                    final SharedPreferences prefs = context.getSharedPreferences(PREFS_FILE, 0);
                    final String id = prefs.getString(PREFS_DEVICE_ID, null);
                    if (id != null) {
                        // Use the ids previously computed and stored in the
                        // prefs file
                        uuid = id;
                    } else {
                        TelephonyManager mTelephonyMgr = (TelephonyManager) FZBaseApplication.getContext().getSystemService(Context.TELEPHONY_SERVICE);
                        String imsi = mTelephonyMgr.getSubscriberId();
                        String imei = mTelephonyMgr.getDeviceId();
                        if (FZStringHelper.notEmpty(imsi)) {
                            uuid = imsi;
                        } else {
                            if (FZStringHelper.notEmpty(imei)) {
                                uuid = imei;
                            } else {
                                final String androidId = Settings.Secure.getString(context.getContentResolver(), Settings.Secure.ANDROID_ID);

                                // Use the Android ID unless it's broken, in which case
                                // fallback on deviceId,
                                // unless it's not available, then fallback on a random
                                // number which we store
                                // to a prefs file
                                try {
                                    if (!"9774d56d682e549c".equals(androidId)) {
                                        uuid = UUID.nameUUIDFromBytes(androidId.getBytes("utf8")).toString();
                                    } else {
                                        final String deviceId = ((TelephonyManager) context
                                                .getSystemService(Context.TELEPHONY_SERVICE)).getDeviceId();
                                        uuid = deviceId != null ? UUID.nameUUIDFromBytes(deviceId.getBytes("utf8")).toString() : UUID
                                                .randomUUID().toString();
                                    }
                                } catch (UnsupportedEncodingException e) {
                                    throw new RuntimeException(e);
                                }
                                // Write the value out to the prefs file
                                Log.d(TAG, "uuid = " + uuid);
                                if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.GINGERBREAD) {
                                    prefs.edit().putString(PREFS_DEVICE_ID, uuid).apply();
                                } else {
                                    prefs.edit().putString(PREFS_DEVICE_ID, uuid).commit();
                                }
                            }
                        }
                    }
                }
            }
        }

    }

    /**
     * Returns a unique UUID for the current android device. As with all UUIDs,
     * this unique ID is "very highly likely" to be unique across all Android
     * devices. Much more so than ANDROID_ID is.
     * <p/>
     * The UUID is generated by using ANDROID_ID as the base key if appropriate,
     * falling back on TelephonyManager.getDeviceID() if ANDROID_ID is known to
     * be incorrect, and finally falling back on a random UUID that's persisted
     * to SharedPreferences if getDeviceID() does not return a usable value.
     * <p/>
     * In some rare circumstances, this ID may change. In particular, if the
     * device is factory reset a new device ID may be generated. In addition, if
     * a user upgrades their phone from certain buggy implementations of Android
     * 2.2 to a newer, non-buggy version of Android, the device ID may change.
     * Or, if a user uninstalls your app on a device that has neither a proper
     * Android ID nor a Device ID, this ID may change on reinstallation.
     * <p/>
     * Note that if the code falls back on using TelephonyManager.getDeviceId(),
     * the resulting ID will NOT change after a factory reset. Something to be
     * aware of.
     * <p/>
     * Works around a bug in Android 2.2 for many devices when using ANDROID_ID
     * directly.
     *
     * @return a UUID that may be used to uniquely identify your device for most
     * purposes.
     */
    public String getDeviceUuid() {
        return uuid;
    }
}
